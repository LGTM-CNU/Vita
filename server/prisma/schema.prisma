generator client {
  provider = "prisma-client-js"
}

// 데이터 베이스 연동
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN // 'ADMIN'
  USER // 'USER'
}

// 데이터 베이스 스키마
model User {
  id       String  @id
  password String
  name     String?

  mode      Role       @default(USER)
  medicines Medicine[]
  alarms    Alarm[]
  // admin     Relation[] @relation("admin")
  // patient   Relation[] @relation("patient")
  // relationId Int
  // relations  Relation[]

  adminRelation Relation[] @relation("AdminRelation")
  userRelation  Relation[] @relation("UserRelation")

  // relationsAdmin Relation[] @relation("AdminRelation", fields: [id], references: [adminId])
  // relationsPatient Relation[] @relation("PatientRelation", fields: [id], references: [patientId])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Medicine {
  id          Int     @id @default(autoincrement())
  name        String
  type        String?
  description String?
  thumbnail   String?

  user   User    @relation(fields: [userId], references: [id])
  userId String
  alarms Alarm[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Relation {
  id Int @id @default(autoincrement())

  adminId   String
  admin     User   @relation("AdminRelation", fields: [adminId], references: [id])
  patientId String
  patient   User   @relation("UserRelation", fields: [patientId], references: [id])

  // admin     User    @relation("AdminRelation", fields: [adminId], references: [id])
  // adminId   String
  // patient   User    @relation("PatientRelation", fields: [patientId], references: [id])
  // patientId String

  // admin      User?    @relation( fields: [adminId], references: [id])
  // adminId    String?
  // patient    User?    @relation( fields: [patientId], references: [id])
  // patientId  String?
  // patientId String
  // adminId   String
  // patientId String

  // user      User?    @relation(fields: [userId], references: [id])
  // userId    String?

  // patient   User?    @relation("patient", fields: [patientId], references: [id])
  // patientId String?
  // users     User
  // patient User @relation("patient", fields: [patientId], references: [id])
  // admin   User @relation("admin", fields: [adminId], references: [id])

  // patient   User   @relation("patient", fields: [patientId], references: [id])
  // patientId String

  // adminId String
  // admin   User   @relation("admin", fields: [adminId], references: [id])

  // User User[]
  // admin User @relation("admin", fields: [adminId], references: [id])
  // user User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Alarm {
  id      Int @id @default(autoincrement())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  medicine   Medicine @relation(fields: [medicineId], references: [id])
  medicineId Int

  time DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chat {
  id          Int @id @default(autoincrement())
  user_id     Int @map("user_id")
  medicine_id Int @map("medicine_id")

  content String
  isVoice Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Todo {
  id Int @id @default(autoincrement())
}
